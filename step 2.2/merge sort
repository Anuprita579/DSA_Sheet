public class Solution {
    public static void mergeSort(int[] a, int l, int r){
        int mid = l + (r-l)/2;
        if(l>=r){
            return;
        }
        mergeSort(a,l,mid);
        mergeSort(a,mid+1,r);
        merge(a, l, mid, r);
    }
    public static void merge(int []a, int l, int mid, int r){
        int []merged = new int[r-l+1];
        int index1 = l;
        int index2 = mid+1;
        int i=0;
        while(index1<=mid && index2<=r){
            if(a[index1]<a[index2]){
                merged[i++] = a[index1++];
            }
            else{
                merged[i++] = a[index2++];
            }
        }
        while(index1<=mid){
            merged[i++] = a[index1++];
        }
        while(index2<=r){
            merged[i++] = a[index2++];
        }
        for(int x=l; x<=r; x++){
            a[x] = merged[x-l];
        }
    }
    
}

// LeetCode
class Solution {
    public int[] sortArray(int[] nums) {
        divide(nums);
        return nums;
    }
    public static void divide(int []a){
        int n= a.length;
        if(n==1){
            return;
        }
        int middle = n/2;
        int []left = new int [middle];
        int []right = new int [n - middle];
        int i=0;//left array
        int j=0;//right array
        for(; i<n; i++){
            if(i<middle){
                left[i] = a[i];
            }
            else{
                right[j] = a[i];
                j++;
            }
        }
        divide(left);
        divide(right);
        merge(a,left,right);

    }
    public static void merge(int []a, int[] left, int[] right){
        int leftSize = a.length/2;
        int rightSize = a.length - leftSize;
        int l=0, r=0, i=0;
        while(l<leftSize && r<rightSize){
            if(left[l]<right[r]){
                a[i++] = left[l++];
            }
            else{
                a[i++] = right[r++];
            }
        }
        while(l<leftSize){
            a[i++] = left[l++];
        }
        while(r<rightSize){
            a[i++] = right[r++];
        }
    }
}
