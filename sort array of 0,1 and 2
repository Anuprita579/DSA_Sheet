//Coding Ninja
//Better Solution
//TC = O(2n)
//SC = O(1)
import java.util.* ;
import java.io.*; 
public class Solution {
    public static void sortArray(ArrayList<Integer> arr, int n) {
        int count0=0, count1=0, count2=0;
        for(int i=0; i<n; i++){
            if(arr.get(i)==0){
                count0++;
            }
            else if(arr.get(i)==1){
                count1++;
            }
            else{
                count2++;
            }
        }
        for (int i=0; i<count0; i++){
            arr.set(i, 0);
        }
        for(int i=count0; i<count0 + count1; i++){
            arr.set(i, 1);
        }
        for(int i=count0+count1; i<n; i++){
            arr.set(i, 2);
        }
    }
}


//Optimal solution
//TC = O(n)
//SC = O(1)
import java.util.* ;
import java.io.*; 
public class Solution {
    public static void sortArray(ArrayList<Integer> arr, int n) {
        int low=0, mid=0, high=n-1;
        while(mid<=high){
            if(arr.get(mid)==0){
                //swap(a[mid], a[low]) low++ mid++
                int temp = arr.get(low);
                arr.set(low, arr.get(mid));
                arr.set(mid, temp);
                low++;
                mid++;
            }
            else if(arr.get(mid)==1){//mid++
                mid++;

            }
            else{ // swap(a[mid], a[high]) high--
                int temp = arr.get(mid);
                arr.set(mid, arr.get(high));
                arr.set(high, temp);
                high--;
            }

        }
    }
}


//Leetcode
//Better Solution
//TC = O(2n)
//SC = O(1)
class Solution {
    public void sortColors(int[] nums) {
        int count0=0;
        int count1 =0;
        int count2=0;
        for(int i=0; i<nums.length; i++){
            if(nums[i]==0){
                count0++;
            }
            if(nums[i]==1){
                count1++;
            }
            if(nums[i]==2){
                count2++;
            }
        }
        for(int i=0; i<count0; i++){
            nums[i] = 0;
        }
        for(int i=count0; i<count0 +count1; i++){
            nums[i] = 1;
        }
        for(int i=count0+count1; i<nums.length; i++){
            nums[i] = 2;
        }
            
    }
}

//Optimal Solution
//TC = O(n)
//SC = O(1)
class Solution {
    public void sortColors(int[] nums) {
        int low=0, mid=0, high=nums.length-1;
        while(mid<=high){
            if(nums[mid]==0){
                //swap(a[mid], a[low]) low++ mid++
                int temp = nums[mid];
                nums[mid] = nums[low];
                nums[low] = temp;
                low++;
                mid++;
            }
            else if(nums[mid]==1){
                mid++;
            }
            else{
                //swap(a[high], a[mid]) high--
                int temp = nums[high];
                nums[high] = nums[mid];
                nums[mid] = temp;
                high--;
            }
        }
        
    }
}