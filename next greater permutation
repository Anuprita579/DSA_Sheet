//Coding Ninjas
//Optimal Solution
//TC = O(3n) {reversing also takes O(n)}
//SC = O(1)
import java.util.*;
public class Solution {
    public static List< Integer > nextGreaterPermutation(List< Integer > a) {
        int n = a.size();
        int index = -1;
        for (int i=n-2; i>=0; i--){
            if(a.get(i)< a.get(i+1)){
                index = i;
                break;
            }
        }
        if(index ==-1){
            Collections.reverse(a);
            return a;
        }
        for (int i=n-1; i>index; i--){
            if(a.get(i)>a.get(index)){
                int temp = a.get(i);
                a.set(i, a.get(index));
                a.set(index, temp);
                break;
            }
        }

        List <Integer> sublist = a.subList(index+1, n);
        Collections.reverse(sublist);
        return a;
        
    }
}

//LEETCODE 
//Optimal Solution
//TC = O(n)
//SC = O(1)
class Solution {
    public void nextPermutation(int[] a) {
        int n = a.length;
        int index = -1;
        for (int i=n-2; i>=0; i--){
            if(a[i]<a[i+1]){
                index = i;
                break;
            }
        }
        if (index == -1){
            reverse(a, 0, n-1);
            return;
        }
        for(int i=n-1; i>index; i--){
            if(a[i]>a[index]){
                int temp = a[i];
                a[i] = a[index];
                a[index] = temp;
                break;
            }
        }
        reverse(a, index+1, n-1);
    }
    public void reverse(int []a, int start, int end){
        while(start<end){
            swap(a,start, end);
            start++;
            end--;
        }
    }
    public void swap(int []a, int i, int j){
        int temp = a[i];
        a[i] = a[j];
        a[j] = temp;
    }
}