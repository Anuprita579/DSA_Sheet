//Coding Ninjas
//Brute Force
//TC = O(n)
public class Solution {
    public static int[] alternateNumbers(int []a) {
        int n= a.length;
        int j=0, k=0;
        int []pos = new int[n/2];
        int []neg = new int[n/2];
        for (int i=0; i<n; i++){
            if(a[i]>0){
                pos[j] = a[i];
                j++;
            }
            if(a[i]<0){
                neg[k] = a[i];
                k++;
            }
        }
        for(int i=0; i<n/2; i++){
            a[2*i] = pos[i];
            a[(2*i) + 1] = neg[i];
        }
        return a;
    }
}

//Optimal Solution
public class Solution {
    public static int[] alternateNumbers(int []a) {
        int n = a.length;
        int pos = 0, neg = 1; 
        int []ans = new int[n];
        for(int i=0; i<n; i++){
            if(a[i]<0){
                ans[neg] = a[i];
                neg += 2; 
            }
            else{
                ans[pos] = a[i];
                pos += 2;
            }
        }
        return ans;
    }
}

//LEETCODE 
//TC = O(n^2) 
class Solution {
    public int[] rearrangeArray(int[] nums) {
        int n = nums.length;
        int []neg = new int [n/2];
        int []pos = new int [n/2];
        int j=0, k=0;
        for (int i=0; i<n; i++){
            if(nums[i]>0){
                pos[j] = nums[i];
                j++; 
            }
            if(nums[i]<0){
                neg[k] =nums[i];
                k++;
            }
        }
        for(int i=0; i<n/2; i++){
            nums[i*2] = pos[i];
            nums[(i*2)+1] = neg[i];
        }
        return nums;
    }
}

//Optimal Solution
//TC = O(n)
class Solution {
    public int[] rearrangeArray(int[] nums) {
        int n = nums.length;
        int pos = 0, neg = 1; 
        int []ans = new int [n];
        for (int i=0; i<n; i++){
            if(nums[i]<0){
                ans[neg] = nums[i];
                neg += 2; 
            }
            else{
                ans[pos] = nums[i];
                pos += 2; 
            }
        }
        return ans;
    }
}