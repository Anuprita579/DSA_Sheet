//Brute force
//TC = O(n^2)
public class Solution {
    public static int longestSubarrayWithSumK(int []a, long k) {
        int n = a.length;
        int sum=0; 
        int len =0;
        for (int i=0; i<n; i++){
            sum =0;
            for(int j=i; j<n; j++){
                sum += a[j];
                if(sum == k){
                    len = Math.max(len, j-i+1);
                }
            }
        }
        return len;
    }
}

//Better Solution
//TC = O(n)
import java.util.HashMap;

public class Solution {
    public static int longestSubarrayWithSumK(int []a, long k) {
        int n = a.length;
        int maxLen =0;
        long sum =0;
        HashMap <Long, Integer> map = new HashMap<>();
        for(int i=0; i<n; i++){
            sum += a[i];
            if(sum == k){
                maxLen = Math.max(maxLen, i+1);
            }

            long rem = sum - k;
            if(map.containsKey(rem)){
                int len = i - map.get(rem);
                maxLen = Math.max(maxLen, len);
            }
            if(!map.containsKey(sum)){
                map.put(sum, i);
            }
        }
        return maxLen;
    }
}


//OPtimal Solution
//TC = O(2n)
public class Solution {
    public static int longestSubarrayWithSumK(int []a, long k) {
        int n =a.length;
        int right =0;
        int left =0;
        long sum = a[0];
        int maxLen = 0;
        while(right<n){
            while(left<=right && sum>k){
                sum -= a[left];
                left++;
            }
            if(sum == k){
                maxLen = Math.max(maxLen, right-left+1);
            }
            right++;
            if(right<n){
                sum += a[right]; 
            }
        }
        return maxLen;
    }
}