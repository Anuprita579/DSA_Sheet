//Brute Force Approach
import java.util.* ;
import java.io.*; 
public class Solution {
    static int[] rotateArray(int[] a, int n) {
        int temp = a[0];
        for(int i=1; i<=n-1; i++){
            a[i-1] = a[i];
        }
        a[n-1] = temp;
        return a;
    }
}

//LEETCODE
//Right Rotate the array by k elements
//Brute Force
//TC = O(n*n*n....ktimes) = O(n^k)
class Solution {
    public void rotate(int[] a, int k) {
        int n=a.length-1;
       while(k>0){
           int temp = a[n];
           for (int i=n; i>0; i--){
               a[i]=a[i-1];
           }
           a[0]=temp;
           k--;
       } 
    }
}

//Optimal Solution 
//TC=O(3n) = O(n)
class Solution {
    public void rotate(int[] a, int k) {
        int m = k%(a.length);
        int n=a.length;
        int []temp = new int[n-m];
        for(int i=0; i<n-m; i++){
            temp[i] = a[i];
        }
        int j=0;
        for(int i=n-m; i<n;i++){
            a[j] = a[i];
            j++;
        } 
        int p=0;
        for(int i=m; i<n;i++){
            a[i] = temp[p];
            p++;
        }
    }
}