//Coding Ninja
//Brute Force
//TC = O(n^2)
//SC = O(1)
public class Solution {
    public static int bestTimeToBuyAndSellStock(int []a) {
        int profit = 0;
        int n = a.length;
        for (int i=0; i<n; i++){
            for (int j=i+1; j<n; j++){
                if(a[j]>a[i]){
                    profit = Math.max(profit, a[j]- a[i]);
                }
            }
        }
        return profit;
    }
}

//Optimal Solution
//TC = O(n)
public class Solution {
    public static int bestTimeToBuyAndSellStock(int []a) {
        int n = a.length;
        int mini = a[0], profit =0;
        for (int i=1; i<n; i++){
            int cost = a[i] - mini;
            profit = Math.max(profit, cost);
            mini = Math.min(mini, a[i]);
        }
        return profit;
    }
}

//LeetCode
//Brute Force 
//TC = O(n^2)
//SC = O(1)
class Solution {
    public int maxProfit(int[] a) {
        int profit =0, n=a.length;
        for (int i=0; i<n; i++){
            for (int j=i+1; j<n; j++){
                if(a[j]>a[i]){
                    profit = Math.max(profit, a[j]- a[i]);
                }
            }
        }
        return profit;
    }
}

//Optimal Solution
//TC = O(n)
class Solution {
    public int maxProfit(int[] a) {
        int n = a.length;
        int mini = a[0], profit = 0;
        for (int i=1; i<n; i++){
            int cost = a[i] - mini;
            profit = Math.max(profit, cost);
            mini = Math.min(mini, a[i]);
        }
        return profit;
    }
}