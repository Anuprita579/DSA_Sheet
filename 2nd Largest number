//Approach 1 
//TC = O(nlogn) {for loop and add elements}+ O(log(n)) {ts.remove} + O(2) {ts.last + ts.first} = O(nlog(n))
import java.util.TreeSet;
public class Solution {
    public static int[] getSecondOrderElements(int n, int []a) {
        int []ans = new int [2];
        TreeSet <Integer> ts = new TreeSet<>();
        for(int i=0; i<n; i++){
            ts.add(a[i]);
        }
        ts.remove(ts.first());
        ts.remove(ts.last());
        ans[0] = ts.last();
        ans[1] = ts.first();
        return ans;
    }
}

//Approach 2
//TC = O(nlog(n)) {Arrays.sort}
import java.util.Arrays;
public class Solution {
    public static int[] getSecondOrderElements(int n, int []a) {
        int []ans = new int [2];
        Arrays.sort(a);
        
        ans[0] = a[n-2];
        ans[1] = a[1];
        return ans;
    }
}

//Approach 3
//TC = O(n) + O(n) = O(n)
import java.util.Arrays;
public class Solution {
    public static int[] getSecondOrderElements(int n, int []a) {
        int []ans = new int [2];
        int large = a[0];
        int large2 = a[0];
        int small = a[0];
        int small2 = a[1];
        for (int i=0; i<n; i++){
            large = Math.max(large,a[i]);
            small = Math.min(small, a[i]);
        }
        for(int i=0; i<n; i++){
            if(a[i]!=large){
                large2 = Math.max(large2,a[i]);
            }
            if(a[i]!=small){
                small2 = Math.min(small2, a[i]);
            }
        }
        ans[0] = large2;
        ans[1] = small2;
        return ans;
    }
}

//Approach 4
//TC = O(n)
import java.util.Arrays;
public class Solution {
    public static int[] getSecondOrderElements(int n, int []a) {
        int []ans = new int [2];
        int large = a[0];
        int large2 = a[0];
        int small = a[0];
        int small2 = a[1];

        for(int i=0; i<n; i++){
            if(a[i]>large){
                large2 = large;
                large = a[i];
            }
            else if(a[i]>large2 && a[i]!=large){
                large2 = a[i];
            }
            if(a[i]<small){
                small2 = small;
                small = a[i];
            }
            else if(a[i]<small2 && a[i]!=small){
                small2 = a[i];
            }
        }
        ans[0] = large2;
        ans[1] = small2;
        return ans;
    }
}
